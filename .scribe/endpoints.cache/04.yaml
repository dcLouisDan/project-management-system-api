## Autogenerated by Scribe. DO NOT MODIFY.

name: 'Task Management'
description: |-

  APIs for managing tasks within projects
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/tasks
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks within projects
      subgroup: ''
      subgroupDescription: ''
      title: 'List All Tasks'
      description: 'Get a paginated list of all tasks with optional filtering.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      per_page:
        name: per_page
        description: 'Number of tasks per page. Defaults to 15.'
        required: false
        example: 20
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      project_id:
        name: project_id
        description: 'Filter tasks by project ID.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      assigned_to_id:
        name: assigned_to_id
        description: 'Filter tasks by assigned user ID.'
        required: false
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      status:
        name: status
        description: 'Filter tasks by status.'
        required: false
        example: in_progress
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      priority:
        name: priority
        description: 'Filter tasks by priority.'
        required: false
        example: high
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      per_page: 20
      project_id: 1
      assigned_to_id: 5
      status: in_progress
      priority: high
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":10,"project_id":10,"title":"Sit molestiae et animi velit.","description":"Et quia saepe libero qui ut. Hic quas enim laudantium veniam ea deserunt illo cumque. Facere qui atque dolorem sed illum.","status":"completed","priority":"low","due_date":"2026-04-05T00:00:00.000000Z","created_at":"2025-10-31T13:47:22.000000Z","updated_at":"2025-10-31T13:47:22.000000Z"},{"id":11,"project_id":11,"title":"Quia neque eveniet minus optio ea nobis.","description":"Rerum odit quibusdam aut ipsum porro veritatis ratione. Iure placeat asperiores officiis suscipit reprehenderit consequuntur. Molestiae est et perspiciatis et soluta sequi. Sed praesentium et ut. Eos earum recusandae molestiae nihil architecto.","status":"approved","priority":"high","due_date":"2026-04-17T00:00:00.000000Z","created_at":"2025-10-31T13:47:22.000000Z","updated_at":"2025-10-31T13:47:22.000000Z"}],"links":{"first":"\/?page=1","last":"\/?page=1","prev":null,"next":null},"meta":{"current_page":1,"from":1,"last_page":1,"links":[{"url":null,"label":"&laquo; Previous","page":null,"active":false},{"url":"\/?page=1","label":"1","page":1,"active":true},{"url":null,"label":"Next &raquo;","page":null,"active":false}],"path":"\/","per_page":15,"to":2,"total":2}}'
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: '{"data": [{"id": 1, "title": "Implement feature X", "status": "in_progress"}], "links": {}, "meta": {}}'
        headers: []
        description: success
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: forbidden
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to retrieve tasks", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/tasks/{task_id}'
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks within projects
      subgroup: ''
      subgroupDescription: ''
      title: 'Show Task Details'
      description: 'Get detailed information about a specific task.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      task_id:
        name: task_id
        description: 'The ID of the task.'
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      task:
        name: task
        description: 'The ID of the task.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      task_id: 16
      task: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":12,"project_id":12,"title":"Et animi quos velit et fugiat.","description":"Accusantium harum mollitia modi deserunt aut ab. Perspiciatis quo omnis nostrum aut adipisci quidem nostrum qui. Incidunt iure odit et et modi ipsum.","status":"approved","priority":"high","due_date":"2026-01-13T00:00:00.000000Z","created_at":"2025-10-31T13:47:22.000000Z","updated_at":"2025-10-31T13:47:22.000000Z"}}'
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: '{"data": {"id": 1, "title": "Implement feature X", "description": "Task description", "status": "in_progress", "priority": "high"}}'
        headers: []
        description: success
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: forbidden
        custom: []
      -
        status: 404
        content: '{"message": "Task not found"}'
        headers: []
        description: 'not found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/users/{userId}/tasks'
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks within projects
      subgroup: ''
      subgroupDescription: ''
      title: 'List Tasks by User'
      description: 'Get a paginated list of tasks assigned to a specific user.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      userId:
        name: userId
        description: 'The ID of the user.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      userId: 5
    queryParameters:
      per_page:
        name: per_page
        description: 'Number of tasks per page. Defaults to 15.'
        required: false
        example: 20
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      project_id:
        name: project_id
        description: 'Filter by project ID.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      status:
        name: status
        description: 'Filter by task status.'
        required: false
        example: in_progress
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      priority:
        name: priority
        description: 'Filter by task priority.'
        required: false
        example: high
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      per_page: 20
      project_id: 1
      status: in_progress
      priority: high
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":13,"project_id":13,"title":"Tenetur ratione nemo voluptate accusamus ut et recusandae modi.","description":"Repellendus assumenda et tenetur ab reiciendis. Perspiciatis deserunt ducimus corrupti et dolores quia. Assumenda odit doloribus repellat officiis corporis nesciunt ut. Iure impedit molestiae ut rem est esse sint.","status":"rejected","priority":"medium","due_date":"2025-11-28T00:00:00.000000Z","created_at":"2025-10-31T13:47:22.000000Z","updated_at":"2025-10-31T13:47:22.000000Z"},{"id":14,"project_id":14,"title":"Aspernatur consectetur id a consectetur assumenda eaque neque.","description":"Nihil accusantium odit ut perspiciatis. Dolorem aut quis ut dolores omnis. Earum consequatur asperiores est vel id aut officiis eos.","status":"in_progress","priority":"medium","due_date":"2026-01-14T00:00:00.000000Z","created_at":"2025-10-31T13:47:22.000000Z","updated_at":"2025-10-31T13:47:22.000000Z"}],"links":{"first":"\/?page=1","last":"\/?page=1","prev":null,"next":null},"meta":{"current_page":1,"from":1,"last_page":1,"links":[{"url":null,"label":"&laquo; Previous","page":null,"active":false},{"url":"\/?page=1","label":"1","page":1,"active":true},{"url":null,"label":"Next &raquo;","page":null,"active":false}],"path":"\/","per_page":15,"to":2,"total":2}}'
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: '{"data": [{"id": 1, "title": "Implement feature X", "assigned_to": {"id": 5, "name": "John Doe"}}], "links": {}, "meta": {}}'
        headers: []
        description: success
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: forbidden
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/projects/{projectId}/tasks'
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks within projects
      subgroup: ''
      subgroupDescription: ''
      title: 'List Tasks by Project'
      description: 'Get a paginated list of tasks for a specific project.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      projectId:
        name: projectId
        description: 'The ID of the project.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      projectId: 1
    queryParameters:
      per_page:
        name: per_page
        description: 'Number of tasks per page. Defaults to 15.'
        required: false
        example: 20
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      assigned_to_id:
        name: assigned_to_id
        description: 'Filter by assigned user ID.'
        required: false
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      status:
        name: status
        description: 'Filter by task status.'
        required: false
        example: in_progress
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      priority:
        name: priority
        description: 'Filter by task priority.'
        required: false
        example: high
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      per_page: 20
      assigned_to_id: 5
      status: in_progress
      priority: high
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":15,"project_id":15,"title":"Nihil accusantium harum mollitia modi deserunt.","description":"Provident perspiciatis quo omnis nostrum aut adipisci quidem. Qui commodi incidunt iure odit. Et modi ipsum nostrum omnis autem et consequatur. Dolores enim non facere tempora.","status":"awaiting_review","priority":"high","due_date":"2026-04-08T00:00:00.000000Z","created_at":"2025-10-31T13:47:22.000000Z","updated_at":"2025-10-31T13:47:22.000000Z"},{"id":16,"project_id":16,"title":"Odit doloribus repellat officiis corporis nesciunt ut ratione iure.","description":"Ut rem est esse sint. Molestiae sunt suscipit doloribus fugiat ut aut. Et error neque recusandae et.","status":"cancelled","priority":"high","due_date":"2026-02-24T00:00:00.000000Z","created_at":"2025-10-31T13:47:22.000000Z","updated_at":"2025-10-31T13:47:22.000000Z"}],"links":{"first":"\/?page=1","last":"\/?page=1","prev":null,"next":null},"meta":{"current_page":1,"from":1,"last_page":1,"links":[{"url":null,"label":"&laquo; Previous","page":null,"active":false},{"url":"\/?page=1","label":"1","page":1,"active":true},{"url":null,"label":"Next &raquo;","page":null,"active":false}],"path":"\/","per_page":15,"to":2,"total":2}}'
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: '{"data": [{"id": 1, "title": "Implement feature X", "project": {"id": 1, "name": "Project Alpha"}}], "links": {}, "meta": {}}'
        headers: []
        description: success
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: forbidden
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/tasks/{task_id}/sync-relations'
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks within projects
      subgroup: ''
      subgroupDescription: ''
      title: 'Sync Task Relations'
      description: |-
        Synchronize task relationships with other tasks and milestones. This will create new relations,
        update existing ones, and remove relations not in the provided arrays.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      task_id:
        name: task_id
        description: 'The ID of the task.'
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      task:
        name: task
        description: 'The ID of the task.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      task_id: 16
      task: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      tasks:
        name: tasks
        description: 'Optional array of related tasks to sync.'
        required: false
        example:
          -
            id: 2
            relation_type: blocks
          -
            id: 3
            relation_type: depends_on
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      milestones:
        name: milestones
        description: 'Optional array of related milestones to sync.'
        required: false
        example:
          -
            id: 5
            relation_type: relates_to
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'tasks[].id':
        name: 'tasks[].id'
        description: 'The ID of the related task.'
        required: true
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'tasks[].relation_type':
        name: 'tasks[].relation_type'
        description: 'Type of relation. Must be one of: blocks, blocked_by, depends_on, dependency_of, parent_of, child_of, relates_to, duplicates, duplicated_by.'
        required: true
        example: blocks
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'milestones[].id':
        name: 'milestones[].id'
        description: 'The ID of the related milestone.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'milestones[].relation_type':
        name: 'milestones[].relation_type'
        description: 'Type of relation. Must be one of: blocks, blocked_by, depends_on, dependency_of, parent_of, child_of, relates_to, duplicates, duplicated_by.'
        required: true
        example: relates_to
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      tasks:
        -
          id: 2
          relation_type: blocks
        -
          id: 3
          relation_type: depends_on
      milestones:
        -
          id: 5
          relation_type: relates_to
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data": null, "message": "Task relations synchronized successfully."}'
        headers: []
        description: success
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: forbidden
        custom: []
      -
        status: 404
        content: '{"message": "Task not found"}'
        headers: []
        description: 'not found'
        custom: []
      -
        status: 422
        content: '{"message": "The given data was invalid.", "errors": {"tasks.0.relation_type": ["The selected relation type is invalid."]}}'
        headers: []
        description: 'validation error'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to synchronize task relations: Circular dependency detected", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/tasks
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks within projects
      subgroup: ''
      subgroupDescription: ''
      title: 'Create Task'
      description: 'Create a new task within a project.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      project:
        name: project
        description: 'The ID of the project.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      project: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      project_id:
        name: project_id
        description: 'The ID of the project.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      title:
        name: title
        description: 'The title of the task. Must be unique within the project. Min: 3 chars, Max: 255 chars.'
        required: true
        example: 'Implement user authentication'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'Optional description of the task.'
        required: false
        example: 'Add JWT-based authentication to the API'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      priority:
        name: priority
        description: 'Priority level of the task. Must be one of: low, medium, high, urgent.'
        required: true
        example: high
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      due_date:
        name: due_date
        description: 'Optional due date for the task. Must be a valid date.'
        required: false
        example: '2025-11-15'
        type: date
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
    cleanBodyParameters:
      project_id: 1
      title: 'Implement user authentication'
      description: 'Add JWT-based authentication to the API'
      priority: high
      due_date: '2025-11-15'
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":17,"project_id":17,"title":"Sunt nihil accusantium harum mollitia.","description":"Aut ab provident perspiciatis quo omnis nostrum aut. Quidem nostrum qui commodi incidunt iure odit. Et modi ipsum nostrum omnis autem et consequatur. Dolores enim non facere tempora.","status":"awaiting_review","priority":"high","due_date":"2026-04-08T00:00:00.000000Z","created_at":"2025-10-31T13:47:22.000000Z","updated_at":"2025-10-31T13:47:22.000000Z"}}'
        headers: []
        description: ''
        custom: []
      -
        status: 201
        content: '{"data": {"id": 1, "title": "Implement user authentication", "priority": "high", "status": "not_started"}, "message": "Task created successfully."}'
        headers: []
        description: success
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: forbidden
        custom: []
      -
        status: 422
        content: '{"message": "The given data was invalid.", "errors": {"title": ["The title has already been taken."]}}'
        headers: []
        description: 'validation error'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to create task: Database error", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/tasks/{task_id}'
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks within projects
      subgroup: ''
      subgroupDescription: ''
      title: 'Update Task'
      description: "Update an existing task's information."
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      task_id:
        name: task_id
        description: 'The ID of the task.'
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      task:
        name: task
        description: 'The ID of the task to update.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      task_id: 16
      task: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      project_id:
        name: project_id
        description: 'The ID of the project.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      title:
        name: title
        description: 'The title of the task. Must be unique within the project. Min: 3 chars, Max: 255 chars.'
        required: true
        example: 'Implement user authentication'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'Optional description of the task.'
        required: false
        example: 'Add JWT-based authentication with refresh tokens'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      priority:
        name: priority
        description: 'Priority level of the task. Must be one of: low, medium, high, urgent.'
        required: true
        example: urgent
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      due_date:
        name: due_date
        description: 'Optional due date for the task. Must be a valid date.'
        required: false
        example: '2025-11-20'
        type: date
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
    cleanBodyParameters:
      project_id: 1
      title: 'Implement user authentication'
      description: 'Add JWT-based authentication with refresh tokens'
      priority: urgent
      due_date: '2025-11-20'
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":18,"project_id":18,"title":"Deserunt aut ab provident perspiciatis quo omnis nostrum.","description":"Quidem nostrum qui commodi incidunt iure odit. Et modi ipsum nostrum omnis autem et consequatur. Dolores enim non facere tempora. Voluptatem laboriosam praesentium quis adipisci.","status":"awaiting_review","priority":"urgent","due_date":"2026-01-17T00:00:00.000000Z","created_at":"2025-10-31T13:47:22.000000Z","updated_at":"2025-10-31T13:47:22.000000Z"}}'
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: '{"data": {"id": 1, "title": "Implement user authentication", "priority": "urgent"}, "message": "Task updated successfully."}'
        headers: []
        description: success
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: forbidden
        custom: []
      -
        status: 404
        content: '{"message": "Task not found"}'
        headers: []
        description: 'not found'
        custom: []
      -
        status: 422
        content: '{"message": "The given data was invalid.", "errors": {"title": ["The title has already been taken."]}}'
        headers: []
        description: 'validation error'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to update task: Database error", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/tasks/{task_id}'
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks within projects
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete Task'
      description: 'Delete a task (soft delete by default). Use force parameter for permanent deletion.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      task_id:
        name: task_id
        description: 'The ID of the task.'
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      task:
        name: task
        description: 'The ID of the task to delete.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      task_id: 16
      task: 1
    queryParameters:
      force:
        name: force
        description: 'Force permanent deletion. Defaults to false.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      force: true
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data": null, "message": "Task deleted successfully."}'
        headers: []
        description: success
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: forbidden
        custom: []
      -
        status: 404
        content: '{"message": "Task not found"}'
        headers: []
        description: 'not found'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to delete task: Task has dependencies", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/tasks/{taskId}/restore'
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks within projects
      subgroup: ''
      subgroupDescription: ''
      title: 'Restore Deleted Task'
      description: 'Restore a soft-deleted task.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      taskId:
        name: taskId
        description: 'The ID of the task to restore.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      taskId: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data": null, "message": "Task restored successfully."}'
        headers: []
        description: success
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: forbidden
        custom: []
      -
        status: 404
        content: '{"message": "Task not found"}'
        headers: []
        description: 'not found'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to restore task: Database error", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
