name: Endpoints
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/v1/auth/login
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Attempt to authenticate a new session.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: ''
        required: true
        example: gbailey@example.net
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: '|]|{+-'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      email: gbailey@example.net
      password: '|]|{+-'
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/auth/logout
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Destroy an authenticated session.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/auth/forgot-password
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Send a reset link to the given user.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/auth/reset-password
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Reset the user's password."
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      token:
        name: token
        description: ''
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      token: architecto
      password: architecto
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/auth/register
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new registered user.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/v1/auth/user/profile-information
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Update the user's profile information."
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/v1/auth/user/password
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Update the user's password."
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/auth/user/confirmed-password-status
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get the password confirmation status.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
          set-cookie: 'XSRF-TOKEN=eyJpdiI6Ik1RZ1JoblpNZmVGN1NFMWRqeGJmc2c9PSIsInZhbHVlIjoiT0VHbWk2cmFnSEk0SmpIVzhRTzB1SnJaVzVrVHVlL3RIZFExTG1peHo2YjlnemlMME9kb0ZGMEpqWExUNzA5TU5TY1RnQm9xeERQMVl0RmlkZHdub3dtSlVETkN0U3Z5LzIwdFFSTkFQM1hHazFjSmVGTzNUOGpSVUFiSFRJQ3kiLCJtYWMiOiJmNjE3YjhjZDRhN2E0MjU5MzAzMjllYWJlMDY4NjQyYmU0YWI2MzFjMmJmYzlmOGM1OTk1OTZhZTIxNDk2ZTNlIiwidGFnIjoiIn0%3D; expires=Sun, 19 Oct 2025 05:34:37 GMT; Max-Age=7200; path=/; samesite=lax; project-management-system-session=eyJpdiI6IkNBU3JZeFNuWmwzdVJraTEvVm1FcWc9PSIsInZhbHVlIjoieHdKNUpnQTlFY2JwT0xiSnRFcFdENEN4MFRObEJJNDRKQzdubDNoWEV5Tm9paWVZeGl2T3JSM05vNW8yQzhtakllUTUrVW1zSmpCeHg2Znl2anB3QXNGZStEUDUraEJSdU16dlpzQnlLTnBtUnE0YWE3UmVaR1krcXZTSmc0TDEiLCJtYWMiOiI4NTU4ZmFjMDkwYzYwYmQzZjQ4MjE5NDUyZDlmMjhjYzExOTI2MGVhNjgxOTUyODAyMzNlZjBhMTQyZmMyNDRkIiwidGFnIjoiIn0%3D; expires=Sun, 19 Oct 2025 05:34:37 GMT; Max-Age=7200; path=/; httponly; samesite=lax'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/auth/user/confirm-password
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Confirm the user's password."
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/auth/two-factor-challenge
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Attempt to authenticate a new session using the two factor authentication code.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      code:
        name: code
        description: ''
        required: false
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      recovery_code:
        name: recovery_code
        description: ''
        required: false
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
    cleanBodyParameters:
      code: architecto
      recovery_code: architecto
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/auth/user/two-factor-authentication
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Enable two factor authentication for the user.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/auth/user/confirmed-two-factor-authentication
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Enable two factor authentication for the user.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: api/v1/auth/user/two-factor-authentication
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Disable two factor authentication for the user.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/auth/user/two-factor-qr-code
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Get the SVG element for the user's two factor authentication QR code."
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
          set-cookie: 'XSRF-TOKEN=eyJpdiI6IjM5cGJtb2hMN0NuVm1MZFcvZGlzMnc9PSIsInZhbHVlIjoiUEl2YlF6bmg2bWlObC9YaURnSCs1SGdPaUkwcVA5ZCtld1NCYjBlekd2UkJRaEhhMFJHcDdwNjhxem1lRVNPWVVwUks2VnFNVHUwUCtVdE1Vb1RlUnByaEhRak10VmNhaHhGT2hOU2lmUzNFcDE3cHl4OHNtZkw3L1pkR1ZKbHkiLCJtYWMiOiIwZjU1YzZhNDZiYzExODEyMDhmMThjYTMyYjNiN2FkM2Y1MTFjOTI3ODk1ODZkM2ExMjU5OWE0NTM3ZjExMWQzIiwidGFnIjoiIn0%3D; expires=Sun, 19 Oct 2025 05:34:37 GMT; Max-Age=7200; path=/; samesite=lax; project-management-system-session=eyJpdiI6ImVLc1kzbnl6Q1NIZFRCanpWNXR4QWc9PSIsInZhbHVlIjoiZTBEemg3ci9SVnY1dWh2OVQxa25OOHdlRlVuMEJkLzZ2RDJhVk5YcDFOTVRRVDFkL0R2bjZkbDJYYW9YaUQ2bmZQTFI5RjlVZVMvS0FaMDZzKzQwQ3NSUTdpYmQ4U0xIS2YrRXNWVnpFWGt4Sy9yUWltR3lzei85RjE5S05FbzEiLCJtYWMiOiI1NjY1NDBiMzlhMTZmNDU2MTY5Njg0MzM4NDM0OTI0NzU0N2M2NWUyNjZhZjM0OGYzZWFhNDQ1NTBkY2Y2M2RjIiwidGFnIjoiIn0%3D; expires=Sun, 19 Oct 2025 05:34:37 GMT; Max-Age=7200; path=/; httponly; samesite=lax'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/auth/user/two-factor-secret-key
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Get the current user's two factor authentication setup / secret key."
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
          set-cookie: 'XSRF-TOKEN=eyJpdiI6Ijg5aHlJN1FTVllVMWtGWHVuZ1pPYkE9PSIsInZhbHVlIjoiOGZnUHRUVmlrZ1lsVHZrNmhRbW1ic3llQWl1UFVrQU1IQ240MzFYNjFSclk0WXNCcE9FakhZMkN0N0ttWkZZbUFQMXk1OVFqTUU1RTRqT0E5K2s2M3dyUldDYjZUQlZ1VWRDS1gyZGtOTGVhSUdKd3Zab21BVXU1MGVWVlczdTYiLCJtYWMiOiJkOTBmZWQyMzAzMzdhYzliYWIyZjg1ODZlZDZkYzk2M2E2YjZkMGI2Yjg0Y2EzMjE0MzdlODJhODJjOWMyNmJlIiwidGFnIjoiIn0%3D; expires=Sun, 19 Oct 2025 05:34:37 GMT; Max-Age=7200; path=/; samesite=lax; project-management-system-session=eyJpdiI6IlFPK01tcDY0cStxZEdKWlU0VlZTVkE9PSIsInZhbHVlIjoiSFFBRjJZY3dYalc1SEFSZUN0c0NsbHRrUmhIcm1NblpBaHYxN0ttOUpzbjdWdDVVb0dJazRVZS84WUNFR2d6RHZndFJ6YWtOTUR5cUg4WlpUY0ZEL1NNYkR4cDAvSTBqSno1bldoaGRJVjVaYS9tSEFLU0JUdWcxVG9uVkdzOXMiLCJtYWMiOiIwOGNhZWUzNmY1YWJjZjYzYzM1YjM1NGI0MzI0MjkwNjBkMmVhZTI0M2RjZWRlZmZhMjM1ODc4ZTMzZjJkZmIxIiwidGFnIjoiIn0%3D; expires=Sun, 19 Oct 2025 05:34:37 GMT; Max-Age=7200; path=/; httponly; samesite=lax'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/auth/user/two-factor-recovery-codes
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get the two factor authentication recovery codes for authenticated user.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
          set-cookie: 'XSRF-TOKEN=eyJpdiI6IlBoN0U1clA0KytDTjJ6a0t5U3h2SHc9PSIsInZhbHVlIjoicUY2Qmh2b1VMNXVHL1ZDMDRLQ1VMc2NVTFJ5cWp0OTR3T0h3Y2c1WlgzWFpHdENQVHdQT05zTlc0Ri9vdE9zNzBPclhzUU1vVU0wR25rUVVGaTMzdSsxTkF2aDRvVHFpU3hpNmd4UG5TZGpmdmZoRXhhTlpBTG5XOUYwaFQ1ZnciLCJtYWMiOiIyZjliMGMwNGI2ZDkyNWI0ZDRlOWNkNjAyMjgxYzNiMTMxMjFkNDQ0Nzk4MzZkZGRjMzlkN2ViZmUwYTk0ZjlkIiwidGFnIjoiIn0%3D; expires=Sun, 19 Oct 2025 05:34:37 GMT; Max-Age=7200; path=/; samesite=lax; project-management-system-session=eyJpdiI6IjBwN3BheFBFa01CZEdmaTE0ZlNYQXc9PSIsInZhbHVlIjoiNm5uVXFxb0dIK2NMVnhWTTQ0REt6cVYyaXdORWp2VmduMzRWcHRCMkp1S2RVM1NrQU0yeTFqbWZadVhwNzRNK1BUUmNHNldhT1plakcyZTQxOXM4Wkw5bWJYU09ldHp3WVd5QUtIbXAxMGwvdGpWK0tLT0o4L1FPOWhuZ0kxajMiLCJtYWMiOiJmY2I0Mjg4MGZhYWJlNGJjOTg0NDVlZDJiYzI1OGFmNzAyZTYzYmQ4MTdjOWRiMWQ0ODNhNTZmMDM0ZjhjODM2IiwidGFnIjoiIn0%3D; expires=Sun, 19 Oct 2025 05:34:37 GMT; Max-Age=7200; path=/; httponly; samesite=lax'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/auth/user/two-factor-recovery-codes
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Generate a fresh set of two factor authentication recovery codes.'
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/user
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: ''
        headers:
          content-type: 'text/html; charset=UTF-8'
          cache-control: 'no-cache, private'
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/users
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a listing of users.'
      description: 'Get a paginated list of all users with optional filtering.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      per_page:
        name: per_page
        description: 'Number of users per page. Defaults to 10.'
        required: false
        example: 15
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      name:
        name: name
        description: 'Filter users by name (partial match).'
        required: false
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'Filter users by email (partial match).'
        required: false
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      role:
        name: role
        description: 'Filter users by role.'
        required: false
        example: admin
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      per_page: 15
      name: John
      email: john@example.com
      role: admin
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":10,"name":"Josue Dooley","email":"rogers.lockman@example.net","roles":[]},{"id":11,"name":"Harry Streich DVM","email":"dschowalter@example.org","roles":[]}],"links":{"first":"\/?page=1","last":"\/?page=1","prev":null,"next":null},"meta":{"current_page":1,"from":1,"last_page":1,"links":[{"url":null,"label":"&laquo; Previous","page":null,"active":false},{"url":"\/?page=1","label":"1","page":1,"active":true},{"url":null,"label":"Next &raquo;","page":null,"active":false}],"path":"\/","per_page":10,"to":2,"total":2}}'
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: '{"data": [{"id": 1, "name": "John Doe", "email": "john@example.com"}], "links": {}, "meta": {}}'
        headers: []
        description: success
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to retrieve user list", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/users/{user_id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Display the specified user.'
      description: 'Get details of a specific user by ID.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 16
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":12,"name":"Ms. Elisabeth Okuneva","email":"gulgowski.asia@example.com","roles":[]}}'
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: '{"data": {"id": 1, "name": "John Doe", "email": "john@example.com", "roles": ["admin"]}, "message": "User retrieved successfully"}'
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: 'not found'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to retrieve user", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/users
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Store a newly created user.'
      description: 'Create a new user with assigned roles.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user.'
        required: true
        example: 'John Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email address of the user. Must be unique.'
        required: true
        example: john.doe@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The password for the user account. Must be at least 8 characters.'
        required: true
        example: SecurePass123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Password confirmation. Must match password field.'
        required: true
        example: SecurePass123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      roles:
        name: roles
        description: 'Array of roles to assign to the user. Allowed values: admin, project manager, team lead, team member.'
        required: true
        example:
          - admin
          - 'project manager'
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Doe'
      email: john.doe@example.com
      password: SecurePass123!
      password_confirmation: SecurePass123!
      roles:
        - admin
        - 'project manager'
    fileParameters: []
    responses:
      -
        status: 201
        content: '{"data": {"id": 1, "name": "John Doe", "email": "john.doe@example.com", "roles": ["admin"]}, "message": "User created successfully"}'
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: '{"message": "The given data was invalid.", "errors": {"email": ["The email has already been taken."]}}'
        headers: []
        description: 'validation error'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to create user", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/users/{user_id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update the specified user.'
      description: "Update an existing user's information."
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 16
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user.'
        required: true
        example: 'John Doe Updated'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email address of the user.'
        required: true
        example: john.updated@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The new password (optional). Must be at least 8 characters if provided.'
        required: false
        example: NewSecurePass123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Password confirmation (required if password is provided).'
        required: false
        example: NewSecurePass123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Doe Updated'
      email: john.updated@example.com
      password: NewSecurePass123!
      password_confirmation: NewSecurePass123!
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data": {"id": 1, "name": "John Doe Updated", "email": "john.updated@example.com", "roles": ["admin"]}, "message": "User updated successfully"}'
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: 'not found'
        custom: []
      -
        status: 422
        content: '{"message": "The given data was invalid.", "errors": {"email": ["The email has already been taken."]}}'
        headers: []
        description: 'validation error'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to update user", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/users/{user_id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Mark the specified user as deleted.'
      description: 'Soft delete a user from the system.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 16
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data": null, "message": "User deleted successfully"}'
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: 'not found'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to delete user", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/users/{user_id}/restore'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Restore the specified soft-deleted user.'
      description: 'Restore a previously deleted user.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 16
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data": {"id": 1, "name": "John Doe", "email": "john@example.com", "roles": ["admin"]}, "message": "User restored successfully"}'
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: 'not found'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to restore user", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/users/{user_id}/roles'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Assign roles to user.'
      description: "Update the roles assigned to a specific user. Note: Cannot remove 'team lead' role if user is actively leading teams."
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 16
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      roles:
        name: roles
        description: 'Array of roles to assign to the user. Allowed values: admin, project manager, team lead, team member.'
        required: true
        example:
          - 'team lead'
          - 'project manager'
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      roles:
        - 'team lead'
        - 'project manager'
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data": {"id": 1, "name": "John Doe", "email": "john@example.com", "roles": ["team lead", "project manager"]}, "message": "Roles assigned successfully"}'
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: 'not found'
        custom: []
      -
        status: 422
        content: '{"success": false, "message": "Cannot remove team lead role: user is actively leading teams", "errors": {"roles": ["User must be removed as team lead from all teams before removing this role."], "active_teams": ["Backend Team", "DevOps Team"]}}'
        headers: []
        description: 'validation error - active team lead'
        custom: []
      -
        status: 422
        content: '{"message": "The given data was invalid.", "errors": {"roles.0": ["The selected roles.0 is invalid."]}}'
        headers: []
        description: 'validation error - invalid roles'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to assign roles", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
