## Autogenerated by Scribe. DO NOT MODIFY.

name: 'User Management'
description: |-

  APIs for managing users
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/users
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'List Users'
      description: 'Get a paginated list of all users with optional filtering.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      per_page:
        name: per_page
        description: 'Number of users per page. Defaults to 10.'
        required: false
        example: 15
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      name:
        name: name
        description: 'Filter users by name (partial match).'
        required: false
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'Filter users by email (partial match).'
        required: false
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      role:
        name: role
        description: 'Filter users by role.'
        required: false
        example: admin
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      per_page: 15
      name: John
      email: john@example.com
      role: admin
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":37,"name":"Aubrey Lehner","email":"osinski.madyson@example.org","roles":[]},{"id":38,"name":"Lourdes Purdy","email":"brook22@example.org","roles":[]}],"links":{"first":"\/?page=1","last":"\/?page=1","prev":null,"next":null},"meta":{"current_page":1,"from":1,"last_page":1,"links":[{"url":null,"label":"&laquo; Previous","page":null,"active":false},{"url":"\/?page=1","label":"1","page":1,"active":true},{"url":null,"label":"Next &raquo;","page":null,"active":false}],"path":"\/","per_page":10,"to":2,"total":2}}'
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: '{"data": [{"id": 1, "name": "John Doe", "email": "john@example.com"}], "links": {}, "meta": {}}'
        headers: []
        description: success
        custom: []
      -
        status: 403
        content: '{"message": "This action is unauthorized."}'
        headers: []
        description: forbidden
        custom: []
      -
        status: 422
        content: '{"message": "The given data was invalid.", "errors": {"per_page": ["The per page must be an integer."]}}'
        headers: []
        description: 'validation error'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to retrieve user list", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/users/{user_id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Get user'
      description: 'Get details of a specific user by ID.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 16
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":39,"name":"Ms. Elisabeth Okuneva","email":"gulgowski.asia@example.com","roles":[]}}'
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: '{"data": {"id": 1, "name": "John Doe", "email": "john@example.com", "roles": ["admin"]}, "message": "User retrieved successfully"}'
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: 'not found'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to retrieve user", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/users
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Create user'
      description: 'Create a new user with assigned roles.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user.'
        required: true
        example: 'John Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email address of the user. Must be unique.'
        required: true
        example: john.doe@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The password for the user account. Must be at least 8 characters.'
        required: true
        example: SecurePass123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Password confirmation. Must match password field.'
        required: true
        example: SecurePass123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      roles:
        name: roles
        description: 'Array of roles to assign to the user. Allowed values: admin, project manager, team lead, team member.'
        required: true
        example:
          - admin
          - 'project manager'
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Doe'
      email: john.doe@example.com
      password: SecurePass123!
      password_confirmation: SecurePass123!
      roles:
        - admin
        - 'project manager'
    fileParameters: []
    responses:
      -
        status: 201
        content: '{"data": {"id": 1, "name": "John Doe", "email": "john.doe@example.com", "roles": ["admin"]}, "message": "User created successfully"}'
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: '{"message": "The given data was invalid.", "errors": {"email": ["The email has already been taken."]}}'
        headers: []
        description: 'validation error'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to create user", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/users/{user_id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user'
      description: "Update an existing user's information."
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 16
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user.'
        required: true
        example: 'John Doe Updated'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email address of the user.'
        required: true
        example: john.updated@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The new password (optional). Must be at least 8 characters if provided.'
        required: false
        example: NewSecurePass123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Password confirmation (required if password is provided).'
        required: false
        example: NewSecurePass123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Doe Updated'
      email: john.updated@example.com
      password: NewSecurePass123!
      password_confirmation: NewSecurePass123!
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data": {"id": 1, "name": "John Doe Updated", "email": "john.updated@example.com", "roles": ["admin"]}, "message": "User updated successfully"}'
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: 'not found'
        custom: []
      -
        status: 422
        content: '{"message": "The given data was invalid.", "errors": {"email": ["The email has already been taken."]}}'
        headers: []
        description: 'validation error'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to update user", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/users/{user_id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Soft delete user'
      description: 'Soft delete a user from the system.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 16
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data": null, "message": "User deleted successfully"}'
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: 'not found'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to delete user", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/users/{userId}/restore'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Restore soft-deleted user'
      description: 'Restore a previously deleted user.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      userId:
        name: userId
        description: ''
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      userId: 16
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data": {"id": 1, "name": "John Doe", "email": "john@example.com", "roles": ["admin"]}, "message": "User restored successfully"}'
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: 'not found'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to restore user", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/users/{user_id}/roles'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users
      subgroup: ''
      subgroupDescription: ''
      title: 'Assign user role'
      description: "Update the roles assigned to a specific user. Note: Cannot remove 'team lead' role if user is actively leading teams."
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 16
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      roles:
        name: roles
        description: 'Array of roles to assign to the user. Allowed values: admin, project manager, team lead, team member.'
        required: true
        example:
          - 'team lead'
          - 'project manager'
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      roles:
        - 'team lead'
        - 'project manager'
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data": {"id": 1, "name": "John Doe", "email": "john@example.com", "roles": ["team lead", "project manager"]}, "message": "Roles assigned successfully"}'
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: 'not found'
        custom: []
      -
        status: 422
        content: '{"success": false, "message": "Cannot remove team lead role: user is actively leading teams", "errors": {"roles": ["User must be removed as team lead from all teams before removing this role."], "active_teams": ["Backend Team", "DevOps Team"]}}'
        headers: []
        description: 'validation error - active team lead'
        custom: []
      -
        status: 422
        content: '{"message": "The given data was invalid.", "errors": {"roles.0": ["The selected roles.0 is invalid."]}}'
        headers: []
        description: 'validation error - invalid roles'
        custom: []
      -
        status: 500
        content: '{"data": null, "message": "Failed to assign roles", "errors": [], "meta": []}'
        headers: []
        description: error
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
